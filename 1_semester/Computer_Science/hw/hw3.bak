; HW 3
(load "D:/Files/Education/Univer/Learning/1_semester/Computer_Science/unit-testing.rkt")

(define (simplify expr)
  (if (not (null? expr))
      (if (or (symbol? expr) (number? expr)) expr
          (let ((op (car expr))
                (arg1 (cadr expr))
                (arg2 (cddr expr)))
            (case op
              ('+ (cond
                    ((eqv? arg1 0) (simplify arg2))
                    ((eqv? arg2 0) (simplify arg1))
                    (else `(+ ,(simplify arg1) ,(simplify (cddr expr))))))
              ('- (cond
                    ((eqv? arg1 0) `(- ,(simplify (car arg2))))
                    ((eqv? (car arg2) 0) (simplify arg1))
                    (else `(- ,(simplify arg1) ,(simplify arg2)))))
              ('* (cond
                    ((or (eqv? arg1 0) (eqv? arg2 0)) 0)
                    ((eqv? arg1 1) (simplify arg2))
                    ((eqv? arg2 1) (simplify arg1))
                    (else `(* ,(simplify arg1) ,(simplify arg2)))))
              ('/ (if (eqv? arg1 0) 0
                      `(/ ,(simplify arg1) ,(simplify arg2)))))))))

(define (derivative expr)
  (let ((len (length expr))
        (func (car expr)))
    (if (eqv? len 1)
        (if (number? func) '(0) '(1))
        (let ((arg1 (list-ref expr 1)))
          (case len
            (2 (case func
                 ('sin (if (list? arg1)
                           `(* ,(derivative arg1)
                               (cos ,arg1))
                           `(cos ,arg1)))
                 ('cos (if (list? arg1)
                           `(* ,(derivative arg1)
                               (- (sin ,arg1)))
                           `(- (sin ,arg1))))
                 ('ln (if (list? arg1)
                          `(* ,(derivative arg1)
                              (/ 1 ,arg1))
                          `(/ 1 ,arg1)))
                 (else (cons func (derivative (cdr expr))))))
            (3 (let ((arg2 (list-ref expr 2)))
                 (case func
                   ('+ (if (list? arg1)
                           `(+ ,(derivative arg1)
                               ,(derivative arg2))
                           `(+ ,(derivative (list arg1))
                               ,@(derivative (list arg2)))))
                   ('- (if (list? arg2)
                           `(- ,(derivative arg1)
                               ,(derivative arg2))
                           `(- ,(derivative arg1)
                               ,@(derivative (list arg2)))))
                   ('* (cond ((and (list? arg1) (list? arg2))
                              `(+ (* ,(derivative arg1) ,arg2)
                                  (* ,arg1 ,(derivative arg2))))
                             ((list? arg2)
                              `(* ,arg1 ,(derivative arg2)))
                             ((number? arg1)
                              `(* ,arg1 ,@(derivative (list arg2))))
                             (else
                              `(+ (* ,@(derivative (list arg1)) ,arg2)
                                  (* ,arg1 ,@(derivative (list arg2)))))))
                   ('/ (if (list? arg2)
                           `(/ (- (* ,@(derivative (list arg1)) ,arg2)
                                  (* ,arg1 ,(derivative arg2)))
                               (expt ,arg2 2))
                           `(/ (- (* ,@(derivative (list arg1)) ,arg2)
                                  (* ,arg1 ,@(derivative (list arg2))))
                               (expt ,arg2 2))))
                   ('expt (cond ((and (number? arg2) (not (eqv? arg1 'e)))
                                 `(* ,arg2 (expt ,arg1 ,(- arg2 1))))
                                ((and (number? arg1) (not (list? arg2)))
                                 `(* (expt ,arg1 ,arg2) (ln ,arg1)))
                                ((and (list? arg2) (eqv? arg1 'e))
                                 `(* ,(derivative arg2) (expt e ,arg2)))
                                ((and (list? arg2) (not (eqv? arg1 'e)))
                                 `(* ,(derivative arg2) (expt ,arg1 ,arg2)
                                     (ln ,arg1)))
                                (else `(expt e ,arg2)))))))
            (else (case func
                    ('+ `(+ ,(derivative arg1)
                            ,(derivative `(+ ,@(cdr (cdr expr))))))
                    ('- `(- ,(derivative arg1)
                            ,(derivative `(- ,@(cdr (cdr expr))))))
                    ('* `(+ (* ,(derivative arg1) ,(cdr (cdr expr)))
                            (* ,arg1 ,(derivative `(* (cdr (cdr expr)))))))
                    ('expt `(,(derivative `(expt ,arg1 ,(cdr (cdr expr)))))))))))))


(define (my-flatten lst)
  (define (my-flatten-helper lst acc stk)
    (cond ((null? lst) 
           (if (null? stk) (reverse acc)
               (my-flatten-helper (car stk) acc (cdr stk))))
          ((pair? (car lst))
           (my-flatten-helper (car lst) acc (if (null? (cdr lst)) 
                                                stk 
                                                (cons (cdr lst) stk))))
          (else 
           (my-flatten-helper (cdr lst) (cons (car lst) acc) stk))))
  (my-flatten-helper lst '() '()))

(define-syntax flatten
  (syntax-rules ()
    ((flatten l) (eval (my-flatten l)
                        (interaction-environment)))))

