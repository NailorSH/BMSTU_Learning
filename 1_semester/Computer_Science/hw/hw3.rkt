; HW 3
(load "D:/Files/Education/Univer/Learning/1_semester/Computer_Science/unit-testing.rkt")

(define (derivative expr)
  (cond
    ((number? expr) '0)
    ((equal? expr 'x) '1)
    (else (case (car expr)
            ('+ (if (= (length expr) 3)
                    (list '+ (derivative (cadr expr))
                          (derivative (caddr expr)))
                    (list '+ (derivative (cadr expr))
                          (derivative (cons '+ (cddr expr))))))
            ('- (if (= (length expr) 2)
                    (- (derivative (cadr expr)))
                    (if (= (length expr) 3)
                        (list '- (derivative (cadr expr))
                              (derivative (caddr expr))))))
            ('* (if (and (number? (cadr expr))
                         (equal? 'x (caddr expr)))
                    (cadr expr)
                    (if (= (length expr) 3)
                        (list '+ (list '* (derivative (cadr expr))(caddr expr))
                              (list '* (cadr expr) (derivative (caddr expr))))
                        (list '+ (list '* (derivative (cadr expr)) (cons '* (cddr expr)))
                              (list '* (cadr expr) (derivative (cons '* (cddr expr))))))))
            ('/ (list '/ (list '- (list '* (derivative (cadr expr)) (caddr expr))
                               (list '* (cadr expr) (derivative (caddr expr))))
                      (list 'expt (caddr expr) 2)))
            ('sin (list '* (list 'cos (cadr expr))
                        (derivative (cadr expr))))
            ('cos (list '* (list '- (list 'sin (cadr expr)))
                        (derivative (cadr expr))))
            ('exp (list '* expr (derivative (cadr expr))))
            ('log (list '* (list 'expt (cadr expr) (- 1))
                        (derivative (cadr expr))))
            ('expt (cond ((number? (caddr expr))
                          (list '* (caddr expr)
                                (list 'expt (cadr expr)
                                      (- (caddr expr) 1))
                                (derivative (cadr expr))))
                         ((and (list? (caddr expr))
                               (eqv? '- (caaddr expr))
                               (number? (car (cdr (cadr (cdr expr))))))
                          (list '* (caddr expr)
                                (list 'expt (cadr expr) (list '- (caddr expr) 1))
                                (derivative (cadr expr))))
                         ((number? (caddr expr))
                          (list '* expr (list 'log (cadr expr))
                                (derivative (caddr expr))))
                         (else
                          (list '* expr
                                (list 'log (cadr expr))
                                (derivative (caddr expr))))))))))

(define (my-flatten lst)
  (define (my-flatten-helper lst acc stk)
    (cond ((null? lst) 
           (if (null? stk) (reverse acc)
               (my-flatten-helper (car stk) acc (cdr stk))))
          ((pair? (car lst))
           (my-flatten-helper (car lst) acc (if (null? (cdr lst)) 
                                                stk 
                                                (cons (cdr lst) stk))))
          (else 
           (my-flatten-helper (cdr lst) (cons (car lst) acc) stk))))
  (my-flatten-helper lst '() '()))

(define-syntax flatten
  (syntax-rules ()
    ((flatten expr)
     (eval (my-flatten 'expr)
           (interaction-environment)))))

(define-syntax mderivative
  (syntax-rules ()
    ((mderivative expr)
     (eval (derivative 'expr)
           (interaction-environment)))))
